/**
 * UberLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 03/05/2016
 */

var request = require('../Http/Client/RequestClient'),
    configuration = require('../configuration'),
    APIHelper = require('../APIHelper');

var EstimatesController = {

    /**
     * The Price Estimates endpoint returns an estimated price range for each product offered at a given location. The price estimate is provided as a formatted string with the full price range and the localized currency symbol.
     * The response also includes low and high estimates, and the ISO 4217 currency code for situations requiring currency conversion. When surge is active for a particular product, its surge_multiplier will be greater than 1, but the price estimate already factors in this multiplier.
     * @param {string} endLatitude    Required parameter: Latitude component of end location.
     * @param {string} endLongitude    Required parameter: Longitude component of end location.
     * @param {string} startLatitude    Required parameter: Latitude component of start location.
     * @param {string} startLongitude    Required parameter: Longitude component of start location.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {PriceResponse}
     */
    getEstimatesPrice : function(endLatitude, endLongitude, startLatitude, startLongitude, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.apiMode, configuration.version);
        
        var queryBuilder = baseUri + "/estimates/price";
        
        //Process query parameters
        queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
            "end_latitude" : endLatitude,
            "end_longitude" : endLongitude,
            "start_latitude" : startLatitude,
            "start_longitude" : startLongitude
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    },


    /**
     * The Time Estimates endpoint returns ETAs for all products offered at a given location, with the responses expressed as integers in seconds. We recommend that this endpoint be called every minute to provide the most accurate, up-to-date ETAs.
     * @param {int} startLatitude    Required parameter: Latitude component.
     * @param {int} startLongitude    Required parameter: Longitude component.
     * @param {string|null} customerUuid    Optional parameter: Unique customer identifier to be used for experience customization.
     * @param {string|null} productId    Optional parameter: Unique identifier representing a specific product for a given latitude & longitude.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {TimeResponse}
     */
    getEstimatesTime : function(startLatitude, startLongitude, customerUuid, productId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.apiMode, configuration.version);
        
        var queryBuilder = baseUri + "/estimates/time";
        
        //Process query parameters
        queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
            "start_latitude" : startLatitude,
            "start_longitude" : startLongitude,
            "customer_uuid " : customerUuid,
            "product_id " : productId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    }

};

module.exports = EstimatesController;
/**
 * UberLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 03/06/2016
 */

var request = require('../Http/Client/RequestClient'),
    configuration = require('../configuration'),
    APIHelper = require('../APIHelper');

var PromotionsController = {

    /**
     * The Promotions endpoint returns information about the promotion that will be available to a new user based on their activity's location. These promotions do not apply for existing users.
     * @param {string} endLatitude    Required parameter: Latitude component of end location.
     * @param {string} endLongitude    Required parameter: Longitude component of end location.
     * @param {string} startLatitude    Required parameter: Latitude component of start location.
     * @param {string} startLongitude    Required parameter: Longitude component of start location.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {PromotionsResponse}
     */
    getPromotions : function(endLatitude, endLongitude, startLatitude, startLongitude, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.apiMode, configuration.version);
        
        var queryBuilder = baseUri + "/promotions";
        
        //Process query parameters
        queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
            "end_latitude" : endLatitude,
            "end_longitude" : endLongitude,
            "start_latitude" : startLatitude,
            "start_longitude" : startLongitude
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    }

};

module.exports = PromotionsController;